name: Generate macOS Installer

on:
  workflow_dispatch:
    inputs:
      macos_version:
        type: choice
        description: "macOS Version"
        required: true
        options:
          - Sequoia v15.0
          - Sonoma v14.7
          - Ventura v13.7
          - Monterey v12.7.6
          - Big Sur v11.7.10
          - Catalina v10.15.7
          - Mojave v10.14.6
          - High Sierra v10.13.6
      file:
        type: choice
        description: "File Type"
        required: true
        options:
          - ISO
          - DMG
          - ZIP

run-name: Generate macOS Installer - ${{ github.event.inputs.macos_version }} ${{ github.event.inputs.file }}

env:
  installer_version: "" # Populated by extract-details
  installer_name: "" # Populated by extract-details

jobs:
  build:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      
      # Extract macOS version details
      - name: Extract Version Details
        id: extract-details
        run: |
          string="${{ github.event.inputs.macos_version }}"
          echo "installer_version=${string//*v/}" >> $GITHUB_ENV
          echo "installer_name=${string// v*/}" >> $GITHUB_ENV

      # Download macOS Installer
      - name: Download macOS Installer
        run: |
          softwareupdate --fetch-full-installer --full-installer-version ${{ env.installer_version }}

      # Generate DMG Installer
      - if: github.event.inputs.file == 'DMG'
        name: Generate macOS DMG Installer
        run: |
          sudo hdiutil create -o /tmp/'${{ env.installer_name }}' -size 16384m -volname '${{ env.installer_name }}' -layout SPUD -fs HFS+J
          sudo hdiutil attach /tmp/'${{ env.installer_name }}'.dmg -noverify -mountpoint /Volumes/'${{ env.installer_name }}'
          sudo /Applications/'Install macOS ${{ env.installer_name }}'.app/Contents/Resources/createinstallmedia --volume /Volumes/'${{ env.installer_name }}' --nointeraction
          hdiutil eject -force /Volumes/'Install macOS ${{ env.installer_name }}'
          sudo mv /tmp/'${{ env.installer_name }}'.dmg ~/Desktop/'${{ env.installer_name }}'.dmg

      # Generate ISO Installer
      - if: github.event.inputs.file == 'ISO'
        name: Generate macOS ISO Installer
        run: |
          sudo hdiutil create -o /tmp/'${{ env.installer_name }}' -size 16384m -volname '${{ env.installer_name }}' -layout SPUD -fs HFS+J
          sudo hdiutil attach /tmp/'${{ env.installer_name }}'.dmg -noverify -mountpoint /Volumes/'${{ env.installer_name }}'
          sleep 20
          sudo /Applications/'Install macOS ${{ env.installer_name }}'.app/Contents/Resources/createinstallmedia --volume /Volumes/'${{ env.installer_name }}' --nointeraction
          hdiutil eject -force /Volumes/'Install macOS ${{ env.installer_name }}'
          hdiutil convert /tmp/'${{ env.installer_name }}'.dmg -format UDTO -o ~/Desktop/'${{ env.installer_name }}'
          mv -v ~/Desktop/'${{ env.installer_name }}'.cdr ~/Desktop/'${{ env.installer_name }}'.iso
          sudo rm -fv /tmp/'${{ env.installer_name }}'.dmg

      # Generate ZIP Installer
      - if: github.event.inputs.file == 'ZIP'
        name: Generate macOS ZIP Installer
        run: |
          cd /Applications
          zip -r 'Install macOS ${{ env.installer_name }}.zip' 'Install macOS ${{ env.installer_name }}.app'
          mv -v 'Install macOS ${{ env.installer_name }}.zip' ~/Desktop/'${{ env.installer_name }}.zip'

      # Upload Installer as an Artifact
      - name: Upload ${{ github.event.inputs.file }}
        uses: actions/upload-artifact@v4
        with:
          name: macOS ${{ env.installer_name }}
          path: "~/Desktop/${{ env.installer_name }}.${{ github.event.inputs.file }}"

      # Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ env.installer_version }}"
          release_name: "macOS Installer - ${{ env.installer_name }} ${{ github.event.inputs.file }}"
          draft: false
          prerelease: false

      # Upload Installer to GitHub Release
      - name: Upload Installer to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "~/Desktop/${{ env.installer_name }}.${{ github.event.inputs.file }}"
          asset_name: "${{ env.installer_name }}.${{ github.event.inputs.file }}"
          asset_content_type: application/octet-stream
